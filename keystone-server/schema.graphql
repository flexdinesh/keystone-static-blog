# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Config {
  id: ID!
  uniqueField: String
  homepageFeedStyle: ConfigHomepageFeedStyleType!
}

enum ConfigHomepageFeedStyleType {
  flat
  grouped
}

input ConfigWhereUniqueInput {
  id: ID
  uniqueField: String
}

input ConfigWhereInput {
  AND: [ConfigWhereInput!]
  OR: [ConfigWhereInput!]
  NOT: [ConfigWhereInput!]
  id: IDFilter
  uniqueField: StringFilter
  homepageFeedStyle: ConfigHomepageFeedStyleTypeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ConfigHomepageFeedStyleTypeNullableFilter {
  equals: ConfigHomepageFeedStyleType
  in: [ConfigHomepageFeedStyleType!]
  notIn: [ConfigHomepageFeedStyleType!]
  not: ConfigHomepageFeedStyleTypeNullableFilter
}

input ConfigOrderByInput {
  id: OrderDirection
  uniqueField: OrderDirection
  homepageFeedStyle: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ConfigUpdateInput {
  uniqueField: String
  homepageFeedStyle: ConfigHomepageFeedStyleType
}

input ConfigUpdateArgs {
  where: ConfigWhereUniqueInput!
  data: ConfigUpdateInput!
}

input ConfigCreateInput {
  uniqueField: String
  homepageFeedStyle: ConfigHomepageFeedStyleType! = flat
}

type Meta {
  id: ID!
  uniqueField: String
  title: String
  about: Meta_about_Document
  name: String
  github: String
  twitter: String
  metaTitle: String
  metaDescription: String
  metaImageUrl: String
  metaImageAltText: String
  metaImageWidth: String
  metaImageHeight: String
  metaUrl: String
}

type Meta_about_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input MetaWhereUniqueInput {
  id: ID
  uniqueField: String
}

input MetaWhereInput {
  AND: [MetaWhereInput!]
  OR: [MetaWhereInput!]
  NOT: [MetaWhereInput!]
  id: IDFilter
  uniqueField: StringFilter
  title: StringFilter
  name: StringFilter
  github: StringFilter
  twitter: StringFilter
  metaTitle: StringFilter
  metaDescription: StringFilter
  metaImageUrl: StringFilter
  metaImageAltText: StringFilter
  metaImageWidth: StringFilter
  metaImageHeight: StringFilter
  metaUrl: StringFilter
}

input MetaOrderByInput {
  id: OrderDirection
  uniqueField: OrderDirection
  title: OrderDirection
  name: OrderDirection
  github: OrderDirection
  twitter: OrderDirection
  metaTitle: OrderDirection
  metaDescription: OrderDirection
  metaImageUrl: OrderDirection
  metaImageAltText: OrderDirection
  metaImageWidth: OrderDirection
  metaImageHeight: OrderDirection
  metaUrl: OrderDirection
}

input MetaUpdateInput {
  uniqueField: String
  title: String
  about: JSON
  name: String
  github: String
  twitter: String
  metaTitle: String
  metaDescription: String
  metaImageUrl: String
  metaImageAltText: String
  metaImageWidth: String
  metaImageHeight: String
  metaUrl: String
}

input MetaUpdateArgs {
  where: MetaWhereUniqueInput!
  data: MetaUpdateInput!
}

input MetaCreateInput {
  uniqueField: String
  title: String
  about: JSON
  name: String
  github: String
  twitter: String
  metaTitle: String
  metaDescription: String
  metaImageUrl: String
  metaImageAltText: String
  metaImageWidth: String
  metaImageHeight: String
  metaUrl: String
}

type Post {
  id: ID!
  title: String
  slug: String
  status: PostStatusType
  category: Category
  publishDate: DateTime
  metaDescription: String
  metaImageUrl: String
  metaImageAltText: String
  metaImageWidth: String
  metaImageHeight: String
  content: Post_content_Document
}

enum PostStatusType {
  draft
  published
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  status: PostStatusTypeNullableFilter
  category: CategoryWhereInput
  publishDate: DateTimeNullableFilter
  metaDescription: StringFilter
  metaImageUrl: StringFilter
  metaImageAltText: StringFilter
  metaImageWidth: StringFilter
  metaImageHeight: StringFilter
}

input PostStatusTypeNullableFilter {
  equals: PostStatusType
  in: [PostStatusType!]
  notIn: [PostStatusType!]
  not: PostStatusTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  metaDescription: OrderDirection
  metaImageUrl: OrderDirection
  metaImageAltText: OrderDirection
  metaImageWidth: OrderDirection
  metaImageHeight: OrderDirection
}

input PostUpdateInput {
  title: String
  slug: String
  status: PostStatusType
  category: CategoryRelateToOneForUpdateInput
  publishDate: DateTime
  metaDescription: String
  metaImageUrl: String
  metaImageAltText: String
  metaImageWidth: String
  metaImageHeight: String
  content: JSON
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  slug: String
  status: PostStatusType
  category: CategoryRelateToOneForCreateInput
  publishDate: DateTime
  metaDescription: String
  metaImageUrl: String
  metaImageAltText: String
  metaImageWidth: String
  metaImageHeight: String
  content: JSON
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type Link {
  id: ID!
  title: String
  url: String
  status: LinkStatusType
  category: Category
  publishDate: DateTime
}

enum LinkStatusType {
  draft
  published
}

input LinkWhereUniqueInput {
  id: ID
  url: String
}

input LinkWhereInput {
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
  id: IDFilter
  title: StringFilter
  url: StringFilter
  status: LinkStatusTypeNullableFilter
  category: CategoryWhereInput
  publishDate: DateTimeNullableFilter
}

input LinkStatusTypeNullableFilter {
  equals: LinkStatusType
  in: [LinkStatusType!]
  notIn: [LinkStatusType!]
  not: LinkStatusTypeNullableFilter
}

input LinkOrderByInput {
  id: OrderDirection
  title: OrderDirection
  url: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input LinkUpdateInput {
  title: String
  url: String
  status: LinkStatusType
  category: CategoryRelateToOneForUpdateInput
  publishDate: DateTime
}

input LinkUpdateArgs {
  where: LinkWhereUniqueInput!
  data: LinkUpdateInput!
}

input LinkCreateInput {
  title: String
  url: String
  status: LinkStatusType
  category: CategoryRelateToOneForCreateInput
  publishDate: DateTime
}

type Category {
  id: ID!
  name: CategoryNameType
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  links(
    where: LinkWhereInput! = {}
    orderBy: [LinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Link!]
  linksCount(where: LinkWhereInput! = {}): Int
}

enum CategoryNameType {
  blog
  notes
  github
  twitter
  dev
  medium
  youtube
  podcast
  talk
}

input CategoryWhereUniqueInput {
  id: ID
  name: CategoryNameType
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: CategoryNameTypeNullableFilter
  posts: PostManyRelationFilter
  links: LinkManyRelationFilter
}

input CategoryNameTypeNullableFilter {
  equals: CategoryNameType
  in: [CategoryNameType!]
  notIn: [CategoryNameType!]
  not: CategoryNameTypeNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input LinkManyRelationFilter {
  every: LinkWhereInput
  some: LinkWhereInput
  none: LinkWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: CategoryNameType
  posts: PostRelateToManyForUpdateInput
  links: LinkRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input LinkRelateToManyForUpdateInput {
  disconnect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: CategoryNameType
  posts: PostRelateToManyForCreateInput
  links: LinkRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input LinkRelateToManyForCreateInput {
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createConfig(data: ConfigCreateInput!): Config
  createConfigs(data: [ConfigCreateInput!]!): [Config]
  updateConfig(where: ConfigWhereUniqueInput!, data: ConfigUpdateInput!): Config
  updateConfigs(data: [ConfigUpdateArgs!]!): [Config]
  deleteConfig(where: ConfigWhereUniqueInput!): Config
  deleteConfigs(where: [ConfigWhereUniqueInput!]!): [Config]
  createMeta(data: MetaCreateInput!): Meta
  createMetas(data: [MetaCreateInput!]!): [Meta]
  updateMeta(where: MetaWhereUniqueInput!, data: MetaUpdateInput!): Meta
  updateMetas(data: [MetaUpdateArgs!]!): [Meta]
  deleteMeta(where: MetaWhereUniqueInput!): Meta
  deleteMetas(where: [MetaWhereUniqueInput!]!): [Meta]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createLink(data: LinkCreateInput!): Link
  createLinks(data: [LinkCreateInput!]!): [Link]
  updateLink(where: LinkWhereUniqueInput!, data: LinkUpdateInput!): Link
  updateLinks(data: [LinkUpdateArgs!]!): [Link]
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteLinks(where: [LinkWhereUniqueInput!]!): [Link]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
}

type Query {
  configs(
    where: ConfigWhereInput! = {}
    orderBy: [ConfigOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Config!]
  config(where: ConfigWhereUniqueInput!): Config
  configsCount(where: ConfigWhereInput! = {}): Int
  metas(
    where: MetaWhereInput! = {}
    orderBy: [MetaOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Meta!]
  meta(where: MetaWhereUniqueInput!): Meta
  metasCount(where: MetaWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  links(
    where: LinkWhereInput! = {}
    orderBy: [LinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Link!]
  link(where: LinkWhereUniqueInput!): Link
  linksCount(where: LinkWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
